/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nutricionistag23.vistas;

import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import nutricionistag23.accesoADatos.DietaData;
import nutricionistag23.accesoADatos.HistorialData;
import nutricionistag23.accesoADatos.PacienteData;
import nutricionistag23.accesoADatos.Validaciones;
import nutricionistag23.entidades.Dieta;
import nutricionistag23.entidades.Historial;
import nutricionistag23.entidades.Paciente;
import static nutricionistag23.vistas.MainMenu.getMainMenu;

/**
 *
 * @author pmora
 */
public class InformesVista extends javax.swing.JInternalFrame {

    private final DietaData DD = new DietaData();
    private final PacienteData PD = new PacienteData();
    private final HistorialData HD = new HistorialData();
    private int pacienteId;
    private DietaComidaVista dietaComidaVista;
    private DefaultTableModel modeloTabla = new DefaultTableModel() {
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };
    private int dni;
    private int idDieta;
    public InformesVista() {
        initComponents();
        armarCabecera();
        llenarTabla();
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        jtPaciente.setEditable(false);
        jtPaciente.setBorder(BorderFactory.createCompoundBorder(jtPaciente.getBorder(), BorderFactory.createEmptyBorder(2, 5, 0, 5)));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jtPaciente = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTablaDieta = new javax.swing.JTable();
        jrbDietaNoActiva = new javax.swing.JRadioButton();
        jrbDietaActiva = new javax.swing.JRadioButton();
        jbVaciarCampos = new javax.swing.JButton();
        jtCerrar = new javax.swing.JToggleButton();
        jbBuscar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtHistorial = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jRadioButton1.setText("jRadioButton1");

        setPreferredSize(new java.awt.Dimension(768, 633));

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setMinimumSize(new java.awt.Dimension(752, 625));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Paciente");

        jtPaciente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtPaciente.setBorder(null);

        JTablaDieta.setBackground(new java.awt.Color(153, 255, 204));
        JTablaDieta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        JTablaDieta.getTableHeader().setResizingAllowed(false);
        JTablaDieta.getTableHeader().setReorderingAllowed(false);
        JTablaDieta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                JTablaDietaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(JTablaDieta);

        jrbDietaNoActiva.setForeground(new java.awt.Color(255, 255, 255));
        jrbDietaNoActiva.setText("Dietas Culminadas");
        jrbDietaNoActiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbDietaNoActivaActionPerformed(evt);
            }
        });

        jrbDietaActiva.setForeground(new java.awt.Color(255, 255, 255));
        jrbDietaActiva.setText("Dietas Vigentes");
        jrbDietaActiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbDietaActivaActionPerformed(evt);
            }
        });

        jbVaciarCampos.setText("Limpiar");
        jbVaciarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVaciarCamposActionPerformed(evt);
            }
        });

        jtCerrar.setText("Cerrar");
        jtCerrar.setMaximumSize(new java.awt.Dimension(83, 32));
        jtCerrar.setMinimumSize(new java.awt.Dimension(83, 32));
        jtCerrar.setPreferredSize(new java.awt.Dimension(83, 32));
        jtCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtCerrarActionPerformed(evt);
            }
        });

        jbBuscar.setText("Buscar");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jtHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jtHistorial);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Dietas");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Historial");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(559, 559, 559)
                        .addComponent(jtCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jrbDietaActiva)
                                    .addGap(18, 18, 18)
                                    .addComponent(jrbDietaNoActiva))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jbVaciarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jrbDietaNoActiva)
                                .addComponent(jrbDietaActiva))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbVaciarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(jtCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JTablaDietaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTablaDietaMouseReleased
        List<Historial> listaHistorial = HD.listaHistorial(pacienteId);
        idDieta= (int)modeloTabla.getValueAt(JTablaDieta.getSelectedRow(), 0);

    }//GEN-LAST:event_JTablaDietaMouseReleased

    private void jrbDietaNoActivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbDietaNoActivaActionPerformed
//        limpiar();
//        tableClean();
//        jrbDietaActiva.setSelected(false);
//        List<Dieta> dietaList = DD.listaDieta();
//        Iterator iterador = dietaList.iterator();
//        while (iterador.hasNext()) {
//            Dieta dieta = (Dieta) iterador.next();
//            if (dieta.getFechaFinal().compareTo(LocalDate.now()) != 1) {// 0 si son iguales, -1 cuando el segundo es mayor que lo primero, 1 si lo segundo es menor a lo primero
//                iterador.remove();
//            }
//        }
//        for (Dieta dieta : dietaList) {//Ver cositas de la tabla aca :)
//            modeloTabla.addRow(new Object[]{dieta.getIdDieta(), dieta.getPaciente(), dieta.getFechaInicial(), dieta.getFechaFinal(), consumo});
//        }
    }//GEN-LAST:event_jrbDietaNoActivaActionPerformed

    private void jrbDietaActivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbDietaActivaActionPerformed
//        limpiar();
//        tableClean();
//        jrbDietaNoActiva.setSelected(false);
//        List<Dieta> dietaList = DD.listaDieta();
//        for (Dieta dieta : dietaList) {
//
//            if (dieta.getFechaFinal().compareTo(LocalDate.now()) != 1) {// 0 si son iguales, -1 cuando el segundo es mayor que lo primero, 1 si lo segundo es menor a lo primero
//                //Ver cositas de la tabla aca :)
//                modeloTabla.addRow(new Object[]{dieta.getIdDieta(), dieta.getPaciente(), dieta.getFechaInicial(), dieta.getFechaFinal(), consumo});
//            }
//        }
    }//GEN-LAST:event_jrbDietaActivaActionPerformed

    private void jbVaciarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVaciarCamposActionPerformed
        limpiar();
        jrbDietaActiva.setSelected(false);
        jrbDietaNoActiva.setSelected(false);
        tableClean();
        llenarTabla();
    }//GEN-LAST:event_jbVaciarCamposActionPerformed

    private void jtCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jtCerrarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        try {
            if (Validaciones.validacionDNI(dni = JOptionPane.showInputDialog(this, "Ingrese el DNI del paciente"))) {
                Paciente paciente = PD.buscarPacienteXDni(Integer.parseInt(dni));
                pacienteId = paciente.getIdPaciente();
                jtPaciente.setText(paciente.getNombre());
                llenarTabla();
            }

        } catch (NullPointerException e) {
        }


    }//GEN-LAST:event_jbBuscarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTablaDieta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbVaciarCampos;
    private javax.swing.JRadioButton jrbDietaActiva;
    private javax.swing.JRadioButton jrbDietaNoActiva;
    private javax.swing.JToggleButton jtCerrar;
    private javax.swing.JTable jtHistorial;
    private javax.swing.JTextField jtPaciente;
    // End of variables declaration//GEN-END:variables

    private void armarCabecera() {// Arma la cabecera de la tabla
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("Paciente");
        modeloTabla.addColumn("Fecha Inicial");
        modeloTabla.addColumn("Fecha Final");
        modeloTabla.addColumn("Cumplido");
        JTablaDieta.setModel(modeloTabla);
        JTablaDieta.getColumnModel().getColumn(0).setPreferredWidth(15);
        JTablaDieta.getColumnModel().getColumn(1).setPreferredWidth(150);
        JTablaDieta.getColumnModel().getColumn(2).setPreferredWidth(80);
        JTablaDieta.getColumnModel().getColumn(3).setPreferredWidth(80);
        JTablaDieta.getColumnModel().getColumn(4).setPreferredWidth(15);

        JTableHeader header = JTablaDieta.getTableHeader();
        header.setDefaultRenderer(new HeaderRenderer(JTablaDieta));
    }

    private void llenarTabla() {
        List<Dieta> listaDieta = DD.listaDietaXPaciente(pacienteId);
        List<String> listaSiNo = new ArrayList<>();
        for (Dieta dieta : listaDieta) {

            modeloTabla.addRow(new Object[]{dieta.getIdDieta(), dieta.getPaciente(), dieta.getFechaInicial(), dieta.getFechaFinal(), null});
            if (dieta.getPesoInicial() < dieta.getPesoFinal()) {
                listaSiNo.add("SUBE");
            } else if (dieta.getPesoInicial() > dieta.getPesoFinal()) {
                listaSiNo.add("BAJA");
            } else {
                listaSiNo.add("MANTIENE");
            }

        }
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();//Alinea los datos de las celdas numericas a la derecha 
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        JTablaDieta.getColumnModel().getColumn(0).setCellRenderer(tcr);
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        JTablaDieta.getColumnModel().getColumn(2).setCellRenderer(tcr);
        JTablaDieta.getColumnModel().getColumn(3).setCellRenderer(tcr);
        JTablaDieta.getColumnModel().getColumn(4).setCellRenderer(tcr);
        Historial historial = null;
        for (int i = 0; i < listaDieta.size(); i++) {
            historial = HD.buscarHistorialXIdPYFecha(pacienteId, listaDieta.get(i).getFechaFinal());
            if (historial != null) {
                double peso = historial.getPeso() - listaDieta.get(i).getPesoFinal();
                modeloTabla.setValueAt(cumplido(listaSiNo.get(i), peso), i, 4);
            }
        }

    }

    private void llenarTablaHistorial() {

        List<Historial> listaHistorial = HD.listaHistorial(PacienteVista.pacienteid);
        Dieta dieta = null;
        Iterator iterar = listaHistorial.iterator();
        while (iterar.hasNext()) {
            Object next = iterar.next();
            
        }
        if(idDieta!=0){
            dieta = DD.buscarDieta(idDieta);
            if(dieta.getFechaInicial().compareTo()){
                
            }
        }
        for (Historial historial : listaHistorial) {
            modeloTabla.addRow(new Object[]{historial.getIdHistorial(), historial.getPaciente().getIdPaciente(), historial.getPeso(), historial.getFechaRegistro()});
        }
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();//Alinea los datos de las celdas numericas a la derecha 
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        jtHistorial.getColumnModel().getColumn(0).setCellRenderer(tcr);
        jtHistorial.getColumnModel().getColumn(1).setCellRenderer(tcr);
        jtHistorial.getColumnModel().getColumn(2).setCellRenderer(tcr);
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        jtHistorial.getColumnModel().getColumn(3).setCellRenderer(tcr);

    }

    private void tableClean() {
        //limpia la tabla de dietas
        if (JTablaDieta.getRowCount() != 0) {
            int largo = JTablaDieta.getRowCount() - 1;
            for (; largo >= 0; largo--) {
                modeloTabla.removeRow(largo);
            }
        }
    }

    private void limpiar() {
        //Limpia los campos
        jtPaciente.setText("");
    }

    private String cumplido(String condicion, double peso) {
        switch (condicion) {
            case "SUBE":
                if (peso < 0) {
                    return "NO";

                } else {
                    return "SI";
                }
            case "MANTIENE":
                if (peso != 0) {
                    return "NO";
                } else {
                    return "SI";
                }
            case "BAJA":
                if (peso > 0) {
                    return "NO";

                } else {
                    return "SI";
                }
        }
        return "";
    }
}
